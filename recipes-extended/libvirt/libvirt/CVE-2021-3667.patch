From 52e8453a03ff6f0ec07e19d122f1cc014b0c6825 Mon Sep 17 00:00:00 2001
From: Vivek Kumbhar <vkumbhar@mvista.com>
Date: Mon, 5 Dec 2022 02:30:19 +0000
Subject: [PATCH] CVE-2021-3667

---
 src/driver-storage.h         |  5 +++++
 src/libvirt-storage.c        | 40 ++++++++++++++++++++++++++++++++++++
 src/libvirt_public.syms      |  5 +++++
 src/qemu/qemu_migration.c    |  2 +-
 src/remote/remote_driver.c   |  1 +
 src/remote/remote_protocol.x | 19 ++++++++++++++++-
 src/remote_protocol-structs  |  7 +++++++
 src/storage/storage_driver.c |  5 +++++
 8 files changed, 82 insertions(+), 2 deletions(-)

diff --git a/src/driver-storage.h b/src/driver-storage.h
index 0489647..3e3fe29 100644
--- a/src/driver-storage.h
+++ b/src/driver-storage.h
@@ -63,6 +63,10 @@ typedef virStoragePoolPtr
 typedef virStoragePoolPtr
 (*virDrvStoragePoolLookupByVolume)(virStorageVolPtr vol);
 
+typedef virStoragePoolPtr
+(*virDrvStoragePoolLookupByTargetPath)(virConnectPtr conn,
+                                       const char *path);
+
 typedef virStoragePoolPtr
 (*virDrvStoragePoolCreateXML)(virConnectPtr conn,
                               const char *xmlDesc,
@@ -218,6 +222,7 @@ struct _virStorageDriver {
     virDrvStoragePoolLookupByName storagePoolLookupByName;
     virDrvStoragePoolLookupByUUID storagePoolLookupByUUID;
     virDrvStoragePoolLookupByVolume storagePoolLookupByVolume;
+    virDrvStoragePoolLookupByTargetPath storagePoolLookupByTargetPath;
     virDrvStoragePoolCreateXML storagePoolCreateXML;
     virDrvStoragePoolDefineXML storagePoolDefineXML;
     virDrvStoragePoolBuild storagePoolBuild;
diff --git a/src/libvirt-storage.c b/src/libvirt-storage.c
index 1ce6745..df3551b 100644
--- a/src/libvirt-storage.c
+++ b/src/libvirt-storage.c
@@ -501,6 +501,46 @@ virStoragePoolLookupByVolume(virStorageVolPtr vol)
 }
 
 
+/**
+ * virStoragePoolLookupByTargetPath:
+ * @conn: pointer to hypervisor connection
+ * @path: path at which the pool is exposed
+ *
+ * Fetch a storage pool which maps to a particular target directory.
+ * If more than one pool maps to the path, it is undefined which
+ * will be returned first.
+ *
+ * virStoragePoolFree should be used to free the resources after the
+ * storage pool object is no longer needed.
+ *
+ * Returns a virStoragePoolPtr object, or NULL if no matching pool is found
+ */
+virStoragePoolPtr
+virStoragePoolLookupByTargetPath(virConnectPtr conn,
+                                 const char *path)
+{
+    VIR_DEBUG("conn=%p, path=%s", conn, NULLSTR(path));
+
+    virResetLastError();
+
+    virCheckConnectReturn(conn, NULL);
+    virCheckNonNullArgGoto(path, error);
+
+    if (conn->storageDriver && conn->storageDriver->storagePoolLookupByTargetPath) {
+        virStoragePoolPtr ret;
+        ret = conn->storageDriver->storagePoolLookupByTargetPath(conn, path);
+        if (!ret)
+            goto error;
+        return ret;
+    }
+
+    virReportUnsupportedError();
+
+ error:
+    virDispatchError(conn);
+    return NULL;
+}
+
 /**
  * virStoragePoolCreateXML:
  * @conn: pointer to hypervisor connection
diff --git a/src/libvirt_public.syms b/src/libvirt_public.syms
index 1e920d6..767128f 100644
--- a/src/libvirt_public.syms
+++ b/src/libvirt_public.syms
@@ -732,4 +732,9 @@ LIBVIRT_1.3.3 {
         virDomainSetPerfEvents;
 } LIBVIRT_1.2.19;
 
+LIBVIRT_4.1.0 {
+    global:
+        virStoragePoolLookupByTargetPath;
+} LIBVIRT_3.9.0;
+
 # .... define new API here using predicted next version number ....
diff --git a/src/qemu/qemu_migration.c b/src/qemu/qemu_migration.c
index c5b2963..f8c344a 100644
--- a/src/qemu/qemu_migration.c
+++ b/src/qemu/qemu_migration.c
@@ -1541,7 +1541,7 @@ qemuMigrationPrecreateDisk(virConnectPtr conn,
         *volName = '\0';
         volName++;
 
-        if (!(pool = storagePoolLookupByTargetPath(conn, basePath)))
+        if (!(pool = virStoragePoolLookupByTargetPath(conn, basePath)))
             goto cleanup;
         format = virStorageFileFormatTypeToString(disk->src->format);
         if (disk->src->format == VIR_STORAGE_FILE_QCOW2)
diff --git a/src/remote/remote_driver.c b/src/remote/remote_driver.c
index e3cf5fb..7263298 100644
--- a/src/remote/remote_driver.c
+++ b/src/remote/remote_driver.c
@@ -7891,6 +7891,7 @@ static virStorageDriver storage_driver = {
     .storagePoolLookupByName = remoteStoragePoolLookupByName, /* 0.4.1 */
     .storagePoolLookupByUUID = remoteStoragePoolLookupByUUID, /* 0.4.1 */
     .storagePoolLookupByVolume = remoteStoragePoolLookupByVolume, /* 0.4.1 */
+    .storagePoolLookupByTargetPath = remoteStoragePoolLookupByTargetPath, /* 4.1.0 */
     .storagePoolCreateXML = remoteStoragePoolCreateXML, /* 0.4.1 */
     .storagePoolDefineXML = remoteStoragePoolDefineXML, /* 0.4.1 */
     .storagePoolBuild = remoteStoragePoolBuild, /* 0.4.1 */
diff --git a/src/remote/remote_protocol.x b/src/remote/remote_protocol.x
index 171c81a..2e41f86 100644
--- a/src/remote/remote_protocol.x
+++ b/src/remote/remote_protocol.x
@@ -1752,6 +1752,14 @@ struct remote_storage_pool_lookup_by_volume_ret {
     remote_nonnull_storage_pool pool;
 };
 
+struct remote_storage_pool_lookup_by_target_path_args {
+    remote_nonnull_string path;
+};
+
+struct remote_storage_pool_lookup_by_target_path_ret {
+    remote_nonnull_storage_pool pool;
+};
+
 struct remote_storage_pool_create_xml_args {
     remote_nonnull_string xml;
     unsigned int flags;
@@ -5792,5 +5800,14 @@ enum remote_procedure {
      * @generate: both
      * @acl: none
      */
-    REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DEVICE_REMOVAL_FAILED = 367
+    REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DEVICE_REMOVAL_FAILED = 367,
+
+    REMOTE_PROC_DOMAIN_SET_LIFECYCLE_ACTION = 390,
+
+    /**
+     * @generate: both
+     * @priority: high
+     * @acl: storage_pool:getattr
+     */
+    REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_TARGET_PATH = 391
 };
diff --git a/src/remote_protocol-structs b/src/remote_protocol-structs
index fe1b8a8..395f8fb 100644
--- a/src/remote_protocol-structs
+++ b/src/remote_protocol-structs
@@ -1330,6 +1330,12 @@ struct remote_storage_pool_lookup_by_volume_args {
 struct remote_storage_pool_lookup_by_volume_ret {
         remote_nonnull_storage_pool pool;
 };
+struct remote_storage_pool_lookup_by_target_path_args {
+        remote_nonnull_string      path;
+};
+struct remote_storage_pool_lookup_by_target_path_ret {
+        remote_nonnull_storage_pool pool;
+};
 struct remote_storage_pool_create_xml_args {
         remote_nonnull_string      xml;
         u_int                      flags;
@@ -3103,4 +3109,5 @@ enum remote_procedure {
         REMOTE_PROC_DOMAIN_GET_PERF_EVENTS = 365,
         REMOTE_PROC_DOMAIN_SET_PERF_EVENTS = 366,
         REMOTE_PROC_DOMAIN_EVENT_CALLBACK_DEVICE_REMOVAL_FAILED = 367,
+        REMOTE_PROC_STORAGE_POOL_LOOKUP_BY_TARGET_PATH = 391,
 };
diff --git a/src/storage/storage_driver.c b/src/storage/storage_driver.c
index fb1b1a2..98bf783 100644
--- a/src/storage/storage_driver.c
+++ b/src/storage/storage_driver.c
@@ -1536,6 +1536,9 @@ storageVolLookupByPath(virConnectPtr conn,
     virStorageVolPtr ret = NULL;
     char *cleanpath;
 
+    if (virStoragePoolLookupByTargetPathEnsureACL(conn, def) < 0)
+        goto cleanup;
+
     cleanpath = virFileSanitizePath(path);
     if (!cleanpath)
         return NULL;
@@ -1660,6 +1663,7 @@ storagePoolLookupByTargetPath(virConnectPtr conn,
                        path);
     }
 
+ cleanup:
     VIR_FREE(cleanpath);
     return ret;
 }
@@ -2674,6 +2678,7 @@ static virStorageDriver storageDriver = {
     .storagePoolLookupByName = storagePoolLookupByName, /* 0.4.0 */
     .storagePoolLookupByUUID = storagePoolLookupByUUID, /* 0.4.0 */
     .storagePoolLookupByVolume = storagePoolLookupByVolume, /* 0.4.0 */
+    .storagePoolLookupByTargetPath = storagePoolLookupByTargetPath, /* 4.1.0 */
     .storagePoolCreateXML = storagePoolCreateXML, /* 0.4.0 */
     .storagePoolDefineXML = storagePoolDefineXML, /* 0.4.0 */
     .storagePoolBuild = storagePoolBuild, /* 0.4.0 */
-- 
2.18.2

